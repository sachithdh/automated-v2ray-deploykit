#!/bin/bash

# =======================================================
# V2ray Server Setup Script with Nginx & SSL Configuration
# =======================================================
clear
echo "==========================================="
echo "     V2ray Server Setup with Nginx & SSL"
echo "==========================================="
echo "                        github.com/sachithdh"
echo ""
echo "Welcome to the Automated v2ray deploykit!"
echo "Please follow the instructions to set up your server."
echo "-------------------------------------------"

set -e  # Exit immediately if a command exits with a non-zero status

# =======================
# Update & Install Packages
# =======================
echo "==========================================="
echo "  Step 1: Updating and upgrading server"
echo "==========================================="
echo "Updating package lists and upgrading existing packages..."
sudo apt update
sudo apt upgrade -y

echo "Installing dependencies..."
sudo apt install curl unzip uuid-runtime -y

# =======================
# Install V2ray
# =======================
echo "==========================================="
echo "  Step 2: Installing V2ray"
echo "==========================================="
echo "Installing V2ray..."
bash <(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)

# Enable and start V2ray service
echo "Enabling and starting V2ray..."
sudo systemctl enable v2ray
sudo systemctl start v2ray

# =======================
# Configure V2ray
# =======================
V2RAY_CONFIG_PATH="/usr/local/etc/v2ray/config.json"

# Generate unique UUID for V2ray client
UUID=$(uuidgen)
if [ -z "$UUID" ]; then
  echo "UUID generation failed"
  exit 1
fi

# Creating the V2ray config
echo "==========================================="
echo "  Step 3: Configuring V2ray"
echo "==========================================="
echo "Configuring V2ray with UUID: $UUID..."
V2RAY_CONFIG=$(cat <<EOF
{
  "log": {
    "loglevel": "debug",
    "access": "/var/log/v2ray/access.log",
    "error": "/var/log/v2ray/error.log"
  },
  "inbounds": [
    {
      "port": 10000,
      "listen":"127.0.0.1",
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "$UUID",
            "alterId": 64
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/ray"
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
)

# Write the configuration to the V2ray config file
echo "Writing V2ray config to $V2RAY_CONFIG_PATH..."
echo "$V2RAY_CONFIG" | sudo tee "$V2RAY_CONFIG_PATH" > /dev/null

# Restart V2ray service
echo "Restarting V2ray to apply configuration..."
sudo systemctl restart v2ray

# =======================
# Install & Configure Nginx
# =======================
echo "==========================================="
echo "  Step 4: Installing Nginx"
echo "==========================================="
echo "Installing Nginx..."
sudo apt install nginx -y

# Let the user enter their server name
echo -n "Enter your server name (e.g., example.com): "
read SERVER_NAME

# Create Nginx configuration
echo "==========================================="
echo "  Step 5: Configuring Nginx"
echo "==========================================="
NGINX_CONFIG_PATH="/etc/nginx/conf.d/v2ray.conf"

NGINX_CONFIG=$(cat <<EOF
server {
    server_name    $SERVER_NAME;

    index index.html;
    root /usr/share/nginx/html/;

    access_log /var/log/nginx/v2ray.access; # General access log
    error_log /var/log/nginx/v2ray.error;  # General error log

    location /ray { # Logging only for /ray requests
        if (\$http_upgrade != "websocket") { 
            return 404; # Return 404 when WebSocket upgrading fails
        }
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10000; # WebSocket is listening on localhost at port 10000
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        # Show real IP in v2ray logs
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }
}
EOF
)

# Write Nginx configuration to file
echo "Writing Nginx config to $NGINX_CONFIG_PATH..."
echo "$NGINX_CONFIG" | sudo tee "$NGINX_CONFIG_PATH" > /dev/null

# Verify Nginx configuration
echo "Verifying Nginx configuration..."
sudo nginx -t || { echo "Nginx config test failed"; exit 1; }

# Reload Nginx to apply the changes
echo "Reloading Nginx..."
sudo systemctl reload nginx || { echo "Failed to reload nginx"; exit 1; }

# =======================
# Install SSL via Certbot
# =======================
echo "==========================================="
echo "  Step 6: Installing SSL with Certbot"
echo "==========================================="
echo "Installing Snap core..."
sudo snap install core || { echo "Snap install failed"; exit 1; }
sudo snap refresh core

echo "Installing Certbot..."
sudo snap install --classic certbot

# Create a symbolic link for Certbot
echo "Creating symbolic link for Certbot..."
sudo ln -s /snap/bin/certbot /usr/bin/certbot

# Obtain SSL certificate for the domain
echo "Obtaining SSL certificate for domain $SERVER_NAME..."
sudo certbot --nginx -d $SERVER_NAME

# Verify auto-renewal of the SSL certificate
echo "Verifying Certbot auto-renewal..."
sudo certbot renew --dry-run

# Reload Nginx again after obtaining SSL cert
echo "Reloading Nginx to apply SSL certificate..."
sudo systemctl reload nginx

# Restart V2ray service
echo "Restarting V2ray to apply SSL changes..."
sudo systemctl restart v2ray

# =======================
# Output Client Configuration
# =======================
echo "==========================================="
echo "  Step 7: Outputting Client Configuration"
echo "==========================================="
echo "You have successfully configured your V2ray server!"
echo "Here is your V2ray client config that can be used to connect to the server:"

V2RAY_CLIENT_CONFIG=$(cat <<EOF
{
  "inbounds": [
    {
      "port": 1234,
      "listen": "127.0.0.1",
      "protocol": "http",
      "sniffing": {
        "enabled": true,
        "destOverride": ["http", "tls"]
      },
      "settings": {
        "auth": "noauth",
        "udp": false
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$SERVER_NAME",
            "port": 443,
            "users": [
              {
                "id": "$UUID",
                "alterId": 0
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "security": "tls",
        "tlsSettings": {
          "serverName": "facebook.com",
          "allowInsecure": true
        },
        "wsSettings": {
          "path": "/ray"
        }
      }
    }
  ]
}
EOF
)

# Display the client configuration
echo "$V2RAY_CLIENT_CONFIG"

echo "==========================================="
echo " V2ray server setup completed successfully!"
echo "==========================================="
